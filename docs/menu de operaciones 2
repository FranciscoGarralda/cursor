import React, { useState, useEffect } from 'react';
import { DollarSign, Check, AlertCircle } from 'lucide-react';

const FinancialOperationsApp = () => {
  const monedas = [
    { value: '', label: 'Seleccionar moneda' },
    { value: 'PESO', label: '🇦🇷 PESO', category: 'base' },
    { value: 'USD', label: '💵 USD', category: 'extranjera' },
    { value: 'EURO', label: '🇪🇺 EURO', category: 'extranjera' },
    { value: 'USDT', label: '₿ USDT', category: 'extranjera' },
    { value: 'REAL', label: '🇧🇷 REAL', category: 'extranjera' },
    { value: 'LIBRA', label: '🇬🇧 LIBRA', category: 'extranjera' },
    { value: 'CL', label: '🇨🇱 CL', category: 'extranjera' }
  ];

  const cuentas = [
    { value: '', label: 'Seleccionar cuenta' },
    { value: 'efectivo', label: 'Efectivo' },
    { value: 'bancaria_socio1', label: 'Cuenta Bancaria Socio1' },
    { value: 'bancaria_socio2', label: 'Cuenta Bancaria Socio2' },
    { value: 'bancaria_alliance', label: 'Cuenta Bancaria Alliance' },
    { value: 'usdt_socio1', label: 'Cuenta Socio1 (USDT)' },
    { value: 'usdt_socio2', label: 'Cuenta Socio2 (USDT)' },
    { value: 'cliente', label: 'Cliente' }
  ];

  const socios = [
    { value: '', label: 'Seleccionar quien cobró' },
    { value: 'socio1', label: 'Socio 1' },
    { value: 'socio2', label: 'Socio 2' },
    { value: 'otro', label: 'Otro' }
  ];

  const estados = [
    { value: '', label: 'Seleccionar estado' },
    { value: 'realizado', label: 'Realizado' },
    { value: 'pendiente', label: 'Pendiente' }
  ];

  const operaciones = {
    'TRANSACCIONES': { icon: '💱', subMenu: ['COMPRA', 'VENTA', 'ARBITRAJE'] },
    'CUENTAS_CORRIENTES': { icon: '🤝', subMenu: ['ALL', 'ME', 'SS', 'AL'] },
    'SOCIOS': { icon: '👥', subMenu: ['Ingreso', 'Salida', 'Prestamo', 'Devolución'] },
    'ADMINISTRATIVAS': { icon: '🔧', subMenu: ['Ajustes', 'Gastos'] },
    'PRESTAMISTAS': { icon: '🏦', subMenu: ['Prestamo', 'Retiro'] }
  };

  const [formData, setFormData] = useState({
    cliente: '',
    fecha: new Date().toISOString().split('T')[0],
    detalle: '',
    operacion: '',
    subOperacion: '',
    tc: '',
    monedaTC: '',
    monto1: '',
    moneda1: '',
    cuenta1: '',
    total: '',
    cuenta2: '',
    pagoDiferido: false,
    montoDiferido: '',
    cuentaDiferida: '',
    comision: '',
    monedaComision: '',
    estado: '',
    por: '',
    nombreOtro: ''
  });

  const [errors, setErrors] = useState({});
  const [showSuccess, setShowSuccess] = useState(false);
  const [operacionesGuardadas, setOperacionesGuardadas] = useState([]);

  // Calcular total automáticamente cuando cambian los valores relevantes
  useEffect(() => {
    if (formData.subOperacion === 'COMPRA' || formData.subOperacion === 'VENTA') {
      const monto = parseFloat(formData.monto1) || 0;
      const tc = parseFloat(formData.tc) || 0;
      
      if (monto > 0 && tc > 0) {
        const total = (monto * tc).toFixed(2);
        setFormData(prev => ({ ...prev, total: total }));
      }
    }
  }, [formData.monto1, formData.tc, formData.subOperacion]);

  // Calcular comisión automáticamente (ejemplo: 2% del monto)
  useEffect(() => {
    if (formData.monto1 && (formData.subOperacion === 'COMPRA' || formData.subOperacion === 'VENTA')) {
      const monto = parseFloat(formData.monto1) || 0;
      const comision = (monto * 0.02).toFixed(2);
      setFormData(prev => ({ 
        ...prev, 
        comision: comision,
        monedaComision: formData.moneda1
      }));
    }
  }, [formData.monto1, formData.moneda1, formData.subOperacion]);

  const handleInputChange = (field, value) => {
    if (field === 'operacion') {
      setFormData(prev => ({
        ...prev,
        [field]: value,
        subOperacion: ''
      }));
    } else if (field === 'por' && value !== 'otro') {
      setFormData(prev => ({
        ...prev,
        [field]: value,
        nombreOtro: ''
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    }
    
    // Limpiar error del campo cuando el usuario empieza a escribir
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.cliente) newErrors.cliente = 'Cliente es requerido';
    if (!formData.fecha) newErrors.fecha = 'Fecha es requerida';
    if (!formData.operacion) newErrors.operacion = 'Operación es requerida';
    if (!formData.subOperacion) newErrors.subOperacion = 'Sub-operación es requerida';
    
    if (formData.subOperacion === 'COMPRA' || formData.subOperacion === 'VENTA') {
      if (!formData.tc) newErrors.tc = 'TC es requerido para compra/venta';
      if (!formData.monedaTC) newErrors.monedaTC = 'Moneda TC es requerida';
    }
    
    if (!formData.monto1) newErrors.monto1 = 'Monto es requerido';
    if (!formData.moneda1) newErrors.moneda1 = 'Moneda es requerida';
    if (!formData.cuenta1) newErrors.cuenta1 = 'Cuenta es requerida';
    if (!formData.total) newErrors.total = 'Total es requerido';
    if (!formData.cuenta2) newErrors.cuenta2 = 'Segunda cuenta es requerida';
    
    if (formData.pagoDiferido) {
      if (!formData.montoDiferido) newErrors.montoDiferido = 'Monto diferido es requerido';
      if (!formData.cuentaDiferida) newErrors.cuentaDiferida = 'Cuenta diferida es requerida';
    }
    
    if (!formData.estado) newErrors.estado = 'Estado es requerido';
    if (!formData.por) newErrors.por = 'Responsable es requerido';
    if (formData.por === 'otro' && !formData.nombreOtro) {
      newErrors.nombreOtro = 'Nombre es requerido cuando selecciona "Otro"';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validateForm()) {
      // Crear objeto de operación con ID único
      const nuevaOperacion = {
        ...formData,
        id: Date.now(),
        fechaCreacion: new Date().toISOString()
      };
      
      // Guardar en el estado local
      setOperacionesGuardadas(prev => [...prev, nuevaOperacion]);
      
      // Mostrar mensaje de éxito
      setShowSuccess(true);
      setTimeout(() => setShowSuccess(false), 3000);
      
      // Limpiar formulario manteniendo la fecha actual
      setFormData({
        cliente: '',
        fecha: new Date().toISOString().split('T')[0],
        detalle: '',
        operacion: '',
        subOperacion: '',
        tc: '',
        monedaTC: '',
        monto1: '',
        moneda1: '',
        cuenta1: '',
        total: '',
        cuenta2: '',
        pagoDiferido: false,
        montoDiferido: '',
        cuentaDiferida: '',
        comision: '',
        monedaComision: '',
        estado: '',
        por: '',
        nombreOtro: ''
      });
      
      // Aquí podrías agregar la lógica para enviar a un servidor
      console.log('Operación guardada:', nuevaOperacion);
    }
  };

  const formatCurrency = (value, moneda) => {
    if (!value) return '';
    const num = parseFloat(value);
    if (isNaN(num)) return value;
    
    const symbols = {
      'PESO': '$',
      'USD': 'US$',
      'EURO': '€',
      'USDT': '₿',
      'REAL': 'R$',
      'LIBRA': '£',
      'CL': 'CL$'
    };
    
    return `${symbols[moneda] || ''}${num.toLocaleString('es-AR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-2">
      <div className="max-w-md mx-auto">
        {/* Header compacto con indicador de operaciones guardadas */}
        <div className="bg-white rounded-xl shadow-lg p-3 mb-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="bg-blue-500 p-2 rounded-lg">
                <DollarSign className="h-5 w-5 text-white" />
              </div>
              <div>
                <h1 className="text-lg font-bold text-gray-900">Operaciones</h1>
              </div>
            </div>
            <div className="text-sm text-gray-600">
              {operacionesGuardadas.length} registradas
            </div>
          </div>
        </div>

        {/* Mensaje de éxito */}
        {showSuccess && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg mb-3 flex items-center">
            <Check className="h-5 w-5 mr-2" />
            <span className="text-sm">Operación guardada exitosamente</span>
          </div>
        )}

        {/* Formulario ultra compacto */}
        <form onSubmit={handleSubmit} className="bg-white rounded-xl shadow-lg p-3">
          <div className="space-y-2">
            {/* CLIENTE - FECHA */}
            <div className="grid grid-cols-2 gap-2">
              <div>
                <label className="text-xs font-medium text-gray-700 mb-1 block">CLIENTE *</label>
                <input
                  type="text"
                  value={formData.cliente}
                  onChange={(e) => handleInputChange('cliente', e.target.value)}
                  className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                    errors.cliente ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                  }`}
                />
                {errors.cliente && <p className="text-xs text-red-500 mt-1">{errors.cliente}</p>}
              </div>
              <div>
                <label className="text-xs font-medium text-gray-700 mb-1 block">FECHA *</label>
                <input
                  type="date"
                  value={formData.fecha}
                  onChange={(e) => handleInputChange('fecha', e.target.value)}
                  className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                    errors.fecha ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                  }`}
                />
                {errors.fecha && <p className="text-xs text-red-500 mt-1">{errors.fecha}</p>}
              </div>
            </div>

            {/* DETALLE */}
            <div>
              <label className="text-xs font-medium text-gray-700 mb-1 block">DETALLE</label>
              <input
                type="text"
                value={formData.detalle}
                onChange={(e) => handleInputChange('detalle', e.target.value)}
                className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500"
                placeholder="Descripción adicional (opcional)"
              />
            </div>

            {/* OPERACION */}
            <div>
              <label className="text-xs font-medium text-gray-700 mb-1 block">OPERACION *</label>
              <select
                value={formData.operacion}
                onChange={(e) => handleInputChange('operacion', e.target.value)}
                className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                  errors.operacion ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                }`}
              >
                <option value="">Seleccionar operación</option>
                {Object.entries(operaciones).map(([key, op]) => (
                  <option key={key} value={key}>
                    {op.icon} {key.replace('_', ' ')}
                  </option>
                ))}
              </select>
              {errors.operacion && <p className="text-xs text-red-500 mt-1">{errors.operacion}</p>}
            </div>

            {/* SUB-OPERACION */}
            {formData.operacion && operaciones[formData.operacion] && (
              <div>
                <label className="text-xs font-medium text-gray-700 mb-1 block">DETALLE OPERACIÓN *</label>
                <select
                  value={formData.subOperacion}
                  onChange={(e) => handleInputChange('subOperacion', e.target.value)}
                  className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                    errors.subOperacion ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                  }`}
                >
                  <option value="">Seleccionar detalle</option>
                  {operaciones[formData.operacion].subMenu.map(subOp => (
                    <option key={subOp} value={subOp}>
                      {subOp}
                    </option>
                  ))}
                </select>
                {errors.subOperacion && <p className="text-xs text-red-500 mt-1">{errors.subOperacion}</p>}
              </div>
            )}

            {/* TC - MONEDA (aparece solo si selecciona COMPRA o VENTA) */}
            {(formData.subOperacion === 'COMPRA' || formData.subOperacion === 'VENTA') && (
              <div className="grid grid-cols-2 gap-2">
                <div>
                  <label className="text-xs font-medium text-gray-700 mb-1 block">TC *</label>
                  <input
                    type="number"
                    step="0.01"
                    value={formData.tc}
                    onChange={(e) => handleInputChange('tc', e.target.value)}
                    className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                      errors.tc ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                    }`}
                    placeholder="Tipo de cambio"
                  />
                  {errors.tc && <p className="text-xs text-red-500 mt-1">{errors.tc}</p>}
                </div>
                <div>
                  <label className="text-xs font-medium text-gray-700 mb-1 block">MONEDA *</label>
                  <select
                    value={formData.monedaTC}
                    onChange={(e) => handleInputChange('monedaTC', e.target.value)}
                    className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                      errors.monedaTC ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  >
                    {monedas.map(moneda => (
                      <option key={moneda.value} value={moneda.value}>
                        {moneda.label}
                      </option>
                    ))}
                  </select>
                  {errors.monedaTC && <p className="text-xs text-red-500 mt-1">{errors.monedaTC}</p>}
                </div>
              </div>
            )}

            {/* MONTO (INGRESO) - MONEDA */}
            <div className="grid grid-cols-2 gap-2">
              <div>
                <label className="text-xs font-medium text-gray-700 mb-1 block">MONTO (INGRESO) *</label>
                <input
                  type="number"
                  step="0.01"
                  value={formData.monto1}
                  onChange={(e) => handleInputChange('monto1', e.target.value)}
                  className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                    errors.monto1 ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                  }`}
                  placeholder="0.00"
                />
                {errors.monto1 && <p className="text-xs text-red-500 mt-1">{errors.monto1}</p>}
              </div>
              <div>
                <label className="text-xs font-medium text-gray-700 mb-1 block">MONEDA *</label>
                <select
                  value={formData.moneda1}
                  onChange={(e) => handleInputChange('moneda1', e.target.value)}
                  className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                    errors.moneda1 ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                  }`}
                >
                  {monedas.map(moneda => (
                    <option key={moneda.value} value={moneda.value}>
                      {moneda.label}
                    </option>
                  ))}
                </select>
                {errors.moneda1 && <p className="text-xs text-red-500 mt-1">{errors.moneda1}</p>}
              </div>
            </div>

            {/* CUENTA */}
            <div>
              <label className="text-xs font-medium text-gray-700 mb-1 block">CUENTA *</label>
              <select
                value={formData.cuenta1}
                onChange={(e) => handleInputChange('cuenta1', e.target.value)}
                className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                  errors.cuenta1 ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                }`}
              >
                {cuentas.map(cuenta => (
                  <option key={cuenta.value} value={cuenta.value}>
                    {cuenta.label}
                  </option>
                ))}
              </select>
              {errors.cuenta1 && <p className="text-xs text-red-500 mt-1">{errors.cuenta1}</p>}
            </div>

            {/* TOTAL (EGRESO) */}
            <div>
              <label className="text-xs font-medium text-gray-700 mb-1 block">
                TOTAL (EGRESO) *
                {formData.total && formData.moneda1 && (
                  <span className="ml-2 text-blue-600">
                    = {formatCurrency(formData.total, formData.moneda1)}
                  </span>
                )}
              </label>
              <input
                type="number"
                step="0.01"
                value={formData.total}
                onChange={(e) => handleInputChange('total', e.target.value)}
                className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 bg-blue-50 ${
                  errors.total ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                }`}
                placeholder="0.00"
              />
              {errors.total && <p className="text-xs text-red-500 mt-1">{errors.total}</p>}
            </div>

            {/* CUENTA (Segunda sección) */}
            <div>
              <label className="text-xs font-medium text-gray-700 mb-1 block">CUENTA (EGRESO) *</label>
              <select
                value={formData.cuenta2}
                onChange={(e) => handleInputChange('cuenta2', e.target.value)}
                className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                  errors.cuenta2 ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                }`}
              >
                {cuentas.map(cuenta => (
                  <option key={cuenta.value} value={cuenta.value}>
                    {cuenta.label}
                  </option>
                ))}
              </select>
              {errors.cuenta2 && <p className="text-xs text-red-500 mt-1">{errors.cuenta2}</p>}
            </div>

            {/* Checkbox Pago Diferido */}
            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="pagoDiferido"
                checked={formData.pagoDiferido}
                onChange={(e) => handleInputChange('pagoDiferido', e.target.checked)}
                className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <label htmlFor="pagoDiferido" className="text-xs font-medium text-gray-700">
                Pago Diferido
              </label>
            </div>

            {/* MONTO - CUENTA adicional para Pago Diferido */}
            {formData.pagoDiferido && (
              <div className="grid grid-cols-2 gap-2">
                <div>
                  <label className="text-xs font-medium text-gray-700 mb-1 block">MONTO (EGRESO) *</label>
                  <input
                    type="number"
                    step="0.01"
                    value={formData.montoDiferido}
                    onChange={(e) => handleInputChange('montoDiferido', e.target.value)}
                    className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                      errors.montoDiferido ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                    }`}
                    placeholder="0.00"
                  />
                  {errors.montoDiferido && <p className="text-xs text-red-500 mt-1">{errors.montoDiferido}</p>}
                </div>
                <div>
                  <label className="text-xs font-medium text-gray-700 mb-1 block">CUENTA *</label>
                  <select
                    value={formData.cuentaDiferida}
                    onChange={(e) => handleInputChange('cuentaDiferida', e.target.value)}
                    className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                      errors.cuentaDiferida ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                    }`}
                  >
                    {cuentas.map(cuenta => (
                      <option key={cuenta.value} value={cuenta.value}>
                        {cuenta.label}
                      </option>
                    ))}
                  </select>
                  {errors.cuentaDiferida && <p className="text-xs text-red-500 mt-1">{errors.cuentaDiferida}</p>}
                </div>
              </div>
            )}

            {/* COMISION - MONEDA */}
            <div className="grid grid-cols-2 gap-2">
              <div>
                <label className="text-xs font-medium text-gray-700 mb-1 block">
                  COMISION
                  {formData.comision && formData.monedaComision && (
                    <span className="ml-1 text-green-600 text-xs">
                      ({formatCurrency(formData.comision, formData.monedaComision)})
                    </span>
                  )}
                </label>
                <input
                  type="number"
                  step="0.01"
                  value={formData.comision}
                  onChange={(e) => handleInputChange('comision', e.target.value)}
                  className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500"
                  placeholder="0.00"
                />
              </div>
              <div>
                <label className="text-xs font-medium text-gray-700 mb-1 block">MONEDA</label>
                <select
                  value={formData.monedaComision}
                  onChange={(e) => handleInputChange('monedaComision', e.target.value)}
                  className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500"
                >
                  {monedas.map(moneda => (
                    <option key={moneda.value} value={moneda.value}>
                      {moneda.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* ESTADO - POR */}
            <div className="grid grid-cols-2 gap-2">
              <div>
                <label className="text-xs font-medium text-gray-700 mb-1 block">ESTADO *</label>
                <select
                  value={formData.estado}
                  onChange={(e) => handleInputChange('estado', e.target.value)}
                  className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                    errors.estado ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                  }`}
                >
                  {estados.map(estado => (
                    <option key={estado.value} value={estado.value}>
                      {estado.label}
                    </option>
                  ))}
                </select>
                {errors.estado && <p className="text-xs text-red-500 mt-1">{errors.estado}</p>}
              </div>
              <div>
                <label className="text-xs font-medium text-gray-700 mb-1 block">POR *</label>
                <select
                  value={formData.por}
                  onChange={(e) => handleInputChange('por', e.target.value)}
                  className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                    errors.por ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                  }`}
                >
                  {socios.map(socio => (
                    <option key={socio.value} value={socio.value}>
                      {socio.label}
                    </option>
                  ))}
                </select>
                {errors.por && <p className="text-xs text-red-500 mt-1">{errors.por}</p>}
              </div>
            </div>

            {/* Campo adicional para "Otro" */}
            {formData.por === 'otro' && (
              <div>
                <label className="text-xs font-medium text-gray-700 mb-1 block">NOMBRE *</label>
                <input
                  type="text"
                  value={formData.nombreOtro}
                  onChange={(e) => handleInputChange('nombreOtro', e.target.value)}
                  placeholder="Ingrese el nombre"
                  className={`w-full px-2 py-1.5 text-sm border rounded-lg focus:outline-none focus:ring-1 ${
                    errors.nombreOtro ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500'
                  }`}
                />
                {errors.nombreOtro && <p className="text-xs text-red-500 mt-1">{errors.nombreOtro}</p>}
              </div>
            )}

            {/* Botón de envío */}
            <div className="pt-3">
              <button
                type="submit"
                className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition duration-200 flex items-center justify-center space-x-2"
              >
                <Check className="h-4 w-4" />
                <span>Guardar Operación</span>
              </button>
            </div>
          </div>
        </form>

        {/* Resumen de operaciones recientes */}
        {operacionesGuardadas.length > 0 && (
          <div className="mt-4 bg-white rounded-xl shadow-lg p-3">
            <h2 className="text-sm font-bold text-gray-900 mb-2">Últimas operaciones</h2>
            <div className="space-y-2">
              {operacionesGuardadas.slice(-3).reverse().map((op) => (
                <div key={op.id} className="text-xs bg-gray-50 p-2 rounded-lg">
                  <div className="flex justify-between">
                    <span className="font-medium">{op.cliente}</span>
                    <span className="text-gray-600">{op.fecha}</span>
                  </div>
                  <div className="text-gray-600">
                    {op.operacion} - {op.subOperacion} | 
                    {formatCurrency(op.monto1, op.moneda1)} → {formatCurrency(op.total, op.moneda1)}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default FinancialOperationsApp;